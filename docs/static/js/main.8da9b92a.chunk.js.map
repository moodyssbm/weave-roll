{"version":3,"sources":["App.js","index.js"],"names":["die","App","useState","topText","setTopText","gameState","setGameState","actionPage","setActionPage","challengeType","setChallengeType","rolls","setRolls","useEffect","newChallengePage","howManyPage","resultsPage","selectChallenge","ct","selectHowMany","n","rnd","Math","floor","random","console","log","className","onClick","Fragment","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8da9b92a.chunk.js","sourcesContent":["import React, {\n  useEffect,\n  useState\n} from 'react';\n\nimport {AiFillFire} from 'react-icons/ai';\nimport {FaWind,\n  FaMountain,\n  FaWater,\n  FaDiceOne,\n  FaDiceTwo,\n  FaDiceThree,\n  FaDiceFour,\n  FaDiceFive,\n  FaDiceSix,\n} from 'react-icons/fa';\n\nlet die = ['fire', 'water', 'wind', 'earth', 'wild', 'fail'];\n\nexport default function App() {\n  let [topText, setTopText] = useState('');\n  let [gameState, setGameState] = useState('');\n  let [actionPage, setActionPage] = useState(<p>Loading...</p>);\n  let [challengeType, setChallengeType] = useState('');\n  let [diceToRoll, setDiceToRoll] = useState(0);\n  let [rolls, setRolls] = useState({\n    'fire': 0,\n    'water': 0,\n    'earth': 0,\n    'wind': 0,\n    'wild': 0,\n    'fail': 0\n  });\n\n  useEffect(() => {\n    switch(gameState) {\n      case 'new':\n        setTopText(`Weave Roller`);\n        setActionPage(newChallengePage);\n        setRolls({\n          'fire': 0,\n          'water': 0,\n          'earth': 0,\n          'wind': 0,\n          'wild': 0,\n          'fail': 0\n        });\n\n        break;\n      case 'how':\n        setTopText('Argue for more!');\n        setActionPage(howManyPage);\n        break;\n      case 'results': \n        setTopText(\"How'd you do?\");\n        setActionPage(resultsPage);\n        break;\n      default:\n        setTopText(\"Oh no.\");\n        setActionPage(<p>Something went wrong</p>);\n        break;\n    }\n  }, [gameState]);\n\n  let selectChallenge = (ct) => {\n    setChallengeType(ct);\n    setGameState('how');\n  };\n\n  let selectHowMany = (n) => {\n    setRolls({\n      'fire': 0,\n      'water': 0,\n      'earth': 0,\n      'wind': 0,\n      'wild': 0,\n      'fail': 0\n    });\n\n    while(n > 0) {\n      let rnd = Math.floor(Math.random() * 6);\n      rolls[die[rnd]]++;\n\n      if(die[rnd] === 'wild') {\n        n++;\n      }\n\n      n--;\n    }\n\n    setRolls(rolls);\n    console.log(rolls);\n    setGameState('results');\n  }\n\n  let newChallengePage = <div className=\"newChallengePage\">\n    <p className=\"pageText\">Select a Challenge type:</p>\n    <p className=\"ncpButtons\">\n      <AiFillFire onClick={() => selectChallenge('fire')} className=\"icon-btn fire\"/>\n      <FaWind onClick={() => selectChallenge('wind')} className=\"icon-btn wind\"/>\n      <FaMountain onClick={() => selectChallenge('earth')} className=\"icon-btn earth\"/>\n      <FaWater onClick={() => selectChallenge('water')} className=\"icon-btn water\"/>\n    </p>\n  </div>;\n\n  let howManyPage = <div>\n    <p className=\"pageText\">Select how many dice to roll:</p>\n    <FaDiceOne className={`icon-btn ${challengeType}`} onClick={() => {selectHowMany(1)}}/>\n    <FaDiceTwo className={`icon-btn ${challengeType}`} onClick={() => {selectHowMany(2)}}/>\n    <FaDiceThree className={`icon-btn ${challengeType}`} onClick={() => {selectHowMany(3)}}/>\n    <FaDiceFour className={`icon-btn ${challengeType}`} onClick={() => {selectHowMany(4)}}/>\n    <FaDiceFive className={`icon-btn ${challengeType}`} onClick={() => {selectHowMany(5)}}/>\n    <FaDiceSix className={`icon-btn ${challengeType}`} onClick={() => {selectHowMany(6)}}/>\n  </div>;\n\n  let weave = <span>\n    <span className=\"fire\">W</span>\n    <span className=\"wind\">e</span>\n    <span>a</span>\n    <span className=\"earth\">v</span>\n    <span className=\"water\">e</span>\n  </span>;\n\n  let resultsPage = <div>\n    <h3>\n      You rolled <span className={challengeType}>{rolls[challengeType] + rolls['wild']} {challengeType}</span>, {rolls['wild']} of which were Weave rolls.\n    </h3>\n\n    <button className={`action-btn ${challengeType}-btn`} onClick={() => setGameState('new')}>Roll Again!</button>\n\n    <p className=\"rollResults\">Full rolls below:</p>\n<p className=\"rollResults\">W {rolls['wild']} ~ <AiFillFire/> {rolls['fire']} ~ <FaWind/> {rolls['wind']} ~ <FaMountain/> {rolls['earth']} ~ <FaWater/> {rolls['water']} ~ X {rolls['fail']}</p>\n  </div>;\n\n  // Init any necessary state values\n  useEffect(() => setGameState('new'), []);\n\n  return(\n    <React.Fragment>\n      <h1 className=\"topText\">{topText}</h1>\n      {actionPage}\n    </React.Fragment>\n  );\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}